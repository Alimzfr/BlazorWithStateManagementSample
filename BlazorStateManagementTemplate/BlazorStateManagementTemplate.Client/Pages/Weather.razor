@page "/weather"
@attribute [StreamRendering]
@inherits FluxorComponent
@inject IState<WeatherState> WeatherState
@inject IDispatcher Dispatcher

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (Loading is true)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in WeatherForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool Loading => WeatherState.Value.Loading;
    private bool Initialized => WeatherState.Value.Initialized;
    private IEnumerable<WeatherForecastDto> WeatherForecasts => WeatherState.Value.WeatherForecasts;

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Initialized)
        {
            Dispatcher.Dispatch(new WeatherActions.LoadWeatherForecastsAction(_cancellationTokenSource.Token));
        }
        await base.OnInitializedAsync();
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            await _cancellationTokenSource.CancelAsync();
            _cancellationTokenSource.Dispose();
        }
        await base.DisposeAsyncCore(disposing);
    }
}
